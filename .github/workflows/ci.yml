#.github/workflows/ci.yml
name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      # 使用 actions/checkout 拉取仓库代码到 runner 中。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Node.js 环境
      # 使用 actions/setup-node 设置指定的 Node.js 版本，以保证环境一致性。
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # 步骤 3: 缓存依赖项
      # 使用 actions/cache 缓存 node_modules 目录，以加速后续工作流的执行。
      # 缓存的 key 基于操作系统和 package-lock.json 文件的哈希值，
      # 只有当依赖项发生变化时，缓存才会失效。
      - name: Cache dependencies
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 步骤 4: 安装依赖项
      # 仅在缓存未命中时（即上一步骤的输出 cache-hit 为 'false'）执行 npm ci。
      # npm ci 提供了比 npm install 更快、更可靠的安装方式，非常适合 CI 环境。
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit!= 'true'
        run: npm ci

      # 步骤 5: 代码风格检查 (Linting)
      # 运行 ESLint 检查代码风格和潜在错误。
      # 需要在项目中配置.eslintrc.json 文件。
      - name: Run ESLint
        run: npx eslint. --ext.js

      # 步骤 6: 运行单元测试并生成覆盖率报告
      # 使用 Jest 运行测试。--ci 标志优化了 Jest 在 CI 环境中的运行。
      # --coverage 标志会生成代码覆盖率报告。
      - name: Run Jest tests
        run: npx jest --ci --coverage

      # 步骤 7: 上传测试覆盖率报告
      # 使用 ArtiomTr/jest-coverage-report-action 将覆盖率报告作为评论发布到 Pull Request 中。
      # 这为代码审查提供了直观的测试质量数据。
      # GITHUB_TOKEN 是由 GitHub Actions 自动提供的，具有必要的权限。
      - name: Jest Coverage Report
        if: github.event_name == 'pull_request'
        uses: ArtiomTr/jest-coverage-report-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
